[tool.poetry]
name = "avro-neo-gen"
version = "0.2.0"
description = ""
authors = ["Zachary Elliott <contact@zell.io>"]
license = "BSD-3-Clause"
readme = "README.md"
homepage = "https://github.com/zellio/avro-neo-gen"
repository = "https://github.com/zellio/avro-neo-gen"
keywords = [
	"avro",
	"data",
	"dataclasses",
	"deserialization",
	"generate",
	"kafka",
	"messaging",
	"python",
	"schema",
	"serialization",
	"types",
]
classifiers = [
	"Development Status :: 3 - Alpha",
	"Environment :: Console",
	"Intended Audience :: Developers",
	"License :: OSI Approved :: BSD License",
	"Natural Language :: English",
	"Programming Language :: Python",
	"Programming Language :: Python :: 3 :: Only",
	"Programming Language :: Python :: 3.10",
	"Programming Language :: Python :: 3.11",
	"Programming Language :: Python :: 3.12",
	"Topic :: Documentation :: Sphinx",
	"Topic :: Software Development :: Code Generators",
	"Topic :: Software Development :: Compilers",
]
packages = [
	{include = "avro_neo_gen"},
	{include = "bin"},
]

[tool.poetry.scripts]
avro-neo-gen = 'avro_neo_gen.cli:cli'

[tool.poetry.dependencies]
python = "^3.11"
avro = "^1.11.1"

[tool.poetry.group.dev.dependencies]
black = "^22.12.0"
coverage = "^7.0.0"
flake8 = "<6"
flake8-annotations-complexity = "^0.0.7"
flake8-broken-line = "^0.6.0"
flake8-bugbear = "^22.12.6"
flake8-builtins = "^2.0.1"
flake8-cognitive-complexity = "^0.1.0"
flake8-comprehensions = "^3.10.1"
flake8-docstrings = "^1.6.0"
flake8-eradicate = "^1.4.0"
flake8-fixme = "^1.1.1"
flake8-isort = "^5.0.3"
flake8-logging-format = "^0.9.0"
flake8-pyproject = "^1.2.2"
flake8-requirements = "^1.7.5"
flake8-return = "^1.2.0"
flake8-simplify = "^0.19.3"
flake8-typing-imports = "^1.14.0"
flake8-use-fstring = "^1.4"
flake8-variables-names = "^0.0.5"
ipython = "^8.7.0"
isort = "^5.11.3"
mypy = "^0.991"
pycodestyle = "<2.10"
pyfakefs = "^5.0.0"
pylint = "^2.15.9"
pylsp-mypy = "^0.6.4"
pytest = "^7.2.0"
pytest-cov = "^4.0.0"
pytest-mypy = "^0.10.2"
pytest-sugar = "^0.9.6"
python-lsp-server = {extras = ["pycodestyle", "pydocstyle", "pyflakes", "rope", "yapf"], version = "^1.6.0"}
sphinx = "<6"
sphinx-rtd-theme = "^1.1.1"
myst-parser = "^0.18.1"
sphinx-click = "^4.4.0"


[tool.poetry.group.bin.dependencies]
click = "^8.1.3"
structlog = "^22.3.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
target-version = ['py311']

[tool.isort]
profile = "black"

[tool.pylint.format]
max-line-length = "120"

[tool.mypy]
python_version = 3.11
check_untyped_defs = true
disallow_untyped_calls = false
disallow_untyped_defs = true
follow_imports = "normal"
follow_imports_for_stubs = false
ignore_missing_imports = false
namespace_packages = false
no_implicit_optional = true
pretty = true
show_error_codes = true
warn_return_any = false
exclude = [
	"example/"
]

[tool.pylsp-mypy]
enabled = true
live_mode = true
strict = false

[[tool.mypy.overrides]]
module = ["avro"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["avro.io"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["avro.schema"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["pyfakefs.fake_filesystem"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["docs.source"]
ignore_missing_imports = true


[tool.coverage.run]
omit = [
	# __init__ files do not implement code, they are for library imports only
	"*/__init__.py",

	# Schema based type declaration are written to spec rather than testsed.
	"avro_neo_gen/core/type_defs.py",

	# Abstract type declarations are tested by type contract.
	"avro_neo_gen/core/neo_gen_type.py",
	"avro_neo_gen/core/neo_gen_encodable.py",
	"avro_neo_gen/core/neo_gen_builder.py",
	"avro_neo_gen/core/abstract_neo_gen_object.py",
	"avro_neo_gen/core/abstract_neo_gen_record_builder.py",
	"avro_neo_gen/core/driver/abstract_avro_driver.py",
	"avro_neo_gen/core/driver/avro_driver_type.py",
]

[tool.coverage.report]
exclude_lines = [
	# We don't test type checking overrides
	"if TYPE_CHECKING:",
]

[tool.flake8]
jobs = "auto"
verbose = 1
format = "default"
count = true
show-source = true
statistics = true
output-file = ".flake8.log"
tee = true
min_python_version = "3.11"
exclude = [
	".git",
	"__pycache__",
	".pytest_cache",
	".mypy_cache",
]
filename = ["*.py"]
builtins = []
disable-noqa = false
max-line-length = 120
max-complexity = 10
hang-closing = true

select = [
	# flake8-annotations-complexity
	"TAE",
	# flake8-broken-line
	"N400",
	# flake8-bugbear
	"B,B901,B902,B903,B904,B950",
	# flake8-builtins
	"A",
	# flake8-cognitive-complexity
	"CCR001",
	# flake8-comprehensions
	"C4",
	# flake8-docstrings
	"D",
	# flake8-eradicate
	"E800",
	# flake8-fixme
	"T100",
	# flake8-isort
	"I00",
	# flake8-logging-format
	"G",
	# flake8-requirements
	"I9",
	# flake8-return
	"R",
	# flake8-simplify
	"SIM",
	# flake8-typing-imports
	"TYP",
	# flake8-use-fstring
	"FS",
	# flake8-variables-names
	"VNE",
	# pycodestyle
	"E,W",
	# pyflakes
	"F",
]
ignore = [
	# closing bracket is missing indentation
	"E133",
	# G004 - Conflict with Structlog
	"G004",
	# W503/504 conflict, binary operator before or after line break
	"W503",
]
per-file-ignores = [
	# F401 - module imported but unused
	# F403 - ‘from module import *’ used; unable to detect undefined names
	"__init__.py:D104,F401,F403",
	# D - Relax doc requirements for tests
	"conftest.py,test_*.py:D",
	# D102 - Relax doc requirements for abstract class
	"avro_neo_gen/core/neo_gen_record.py:D102"
]
enable-extensions = []
doctests = true
include-in-doctest = []
exclude-in-doctest = []
extend-select = []
